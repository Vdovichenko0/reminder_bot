const User = require('../model/User');
const moment = require('moment-timezone');
const sanitizeHtml = require('sanitize-html');

const registerUser = async (userRegisterDto) => {
    const { isValid, errors } = userRegisterDto.validate();

    if (!isValid) {
        const errorMessages = Object.values(errors).join(' ');
        throw new Error(`Validation failed: ${errorMessages}`);
    }

    const { telegramId, firstName, lastName, username, phoneNumber, language, reminderBefore, timezone, isBot, languageCode } = userRegisterDto;
    const existingUser = await User.findOne({ telegramId });
    if (existingUser) {
        throw new Error('User already exists with this telegramId: ' + telegramId);
    }

    const newUser = new User({
        telegramId,
        firstName,
        lastName,
        username,
        phoneNumber,
        language,
        reminderBefore,
        timezone,
        isBot,
        languageCode
    });

    // const newUser = new User({
    //     telegramId,
    //     language,
    //     reminderBefore,
    //     timezone
    //     // all other data set auto like dateRegister
    // });

    await newUser.save();

    return newUser;
};

const addReminder = async ({ telegramId, date, text }) => {
    console.log("here 1")
    try {
        const bot= require('../../bot/bot');

        if (!bot || !bot.telegram) {
            throw new Error('‚ùå Error bot not initialized');
        }

        const user = await User.findOne({ telegramId });
        if (!user) {
            return { success: false, error: '‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.' };
        }

        const safeText = sanitizeHtml(text, {
            allowedTags: [],
            allowedAttributes: {}
        });

        const userTimezone = user.timezone || 'UTC';
        const localMoment = moment.tz(date, 'DD.MM.YYYY HH:mm', userTimezone);
        const utcMoment = localMoment.clone().utc();

        if (!localMoment.isValid()) {
            return { success: false, error: '‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞.' };
        }

        const reminderData = {
            date: utcMoment.toDate(),
            message: safeText
        };

        const key = utcMoment.toISOString().replace(/\./g, '_');

        await User.findOneAndUpdate(
            { telegramId },
            { $set: { [`reminders.${key}`]: reminderData } },
            { upsert: true, new: true }
        );

        await bot.telegram.sendMessage(
            user.telegramId,
            `‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ: \n*${date}*\n${safeText}`,
            { parse_mode: 'Markdown' }
        );

        console.log("reminder added success");
        return { success: true };
    } catch (error) {
        return { success: false, error: '‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.' };
    }
};


const validateReminderDate = async ({ telegramId, date }) => {
    console.log("start here")
    try {
        const user = await User.findOne({ telegramId });
        if (!user) {
            return { success: false, error: '‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.' };
        }

        const userTimezone = user.timezone || 'UTC';

        const momentDate = moment.tz(date, 'DD.MM.YYYY HH:mm', userTimezone);

        if (!momentDate.isValid()) {
            return { success: false, error: '‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞ –∏–ª–∏ —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ "–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú".' };
        }
        const dateUTC = momentDate.clone().utc();

        const nowUTC = moment.utc();

        if (dateUTC.isBefore(nowUTC)) {
            return { success: false, error: '‚ùå –ù–µ–ª—å–∑—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–∞ –ø—Ä–æ—à–µ–¥—à—É—é –¥–∞—Ç—É.' };
        }

        const key = dateUTC.toISOString().replace(/\./g, '_');

        if (user.reminders && user.reminders.has(key)) {
            return { success: false, error: '‚ö†Ô∏è –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–∞ —ç—Ç—É –¥–∞—Ç—É —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!' };
        }

        return { success: true };
    } catch (error) {
        console.error('Error validate date:', error);
        return { success: false, error: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞—Ç—ã.' };
    }
};

const getAllReminders = async ({ telegramId }) => {
    try {
        const user = await User.findOne({ telegramId });
        // console.log(user);

        if (!user || !user.reminders || user.reminders.size === 0) {
            return { success: false, error: 'üîç –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.' };
        }

        const userTimezone = user.timezone || 'UTC';
        // console.log(`Timezone of user: ${userTimezone}`);

        const remindersArray = Array.from(user.reminders.entries()).map(([key, reminder]) => {
            if (!reminder.date) return null;

            const utcMoment = moment.utc(reminder.date); // UTC
            const userMoment = utcMoment.clone().tz(userTimezone); // timezone

            // console.log('üìÖ Original date (UTC):', utcMoment.format());
            // console.log('üåç Date in user‚Äôs timezone:', userMoment.format('YYYY-MM-DD HH:mm:ss Z'));

            return {
                date: userMoment.format('DD.MM.YYYY HH:mm'),
                message: reminder.message,
                key: key,
                id: reminder._id.toString(),
            };
        }).filter(Boolean);

        if (remindersArray.length === 0) {
            return { success: false, error: '‚ùå –û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏—Ö —Ñ–æ—Ä–º–∞—Ç.' };
        }

        remindersArray.sort((a, b) => {
            return moment(a.date, 'DD.MM.YYYY HH:mm').toDate() - moment(b.date, 'DD.MM.YYYY HH:mm').toDate();
        });

        return { success: true, reminders: remindersArray };
    } catch (error) {
        // console.error('Error fetching reminders:', error);
        return { success: false, error: '‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.' };
    }
};

const deleteReminder = async ({ telegramId, key }) => {
    try {
        const user = await User.findOne({ telegramId });

        if (!user || !user.reminders || !user.reminders.has(key)) {
            return { success: false, error: '‚ùå –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.' };
        }

        user.reminders.delete(key);
        await user.save();

        return { success: true };
    } catch (error) {
        console.error('Error remove reminder:', error);
        return { success: false, error: '‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.' };
    }
};

const sendScheduledMessages = async (bot) => {
    try {
        const users = await User.find({});

        for (const user of users) {
            //console.log(`---------------------------------------------------`);
            //console.log(`üë§ User: ${user.telegramId}`);

            if (!user || !user.reminders || user.reminders.size === 0) {
                // console.log(`üîç The user has no reminders.`);
                continue;
            }

            const userTimezone = user.timezone || "UTC";
            const nowUser = moment().tz(userTimezone);

            //console.log(`üåç User's timezone: ${userTimezone}`);
            //console.log(`‚è≥ Current time (User's timezone): ${nowUser.format('YYYY-MM-DD HH:mm:ss')}`);

            const remindersArray = [...user.reminders.values()].map(reminder => ({
                id: reminder._id.toString(),
                date: moment.utc(reminder.date),  // ‚ùó The date is stored in UTC in the database
                message: reminder.message
            }));

            const validReminders = remindersArray.filter(reminder => reminder.date.isValid());

            if (validReminders.length === 0) {
                //console.log(`üîç The user has no valid reminders.`);
                continue;
            }

            validReminders.sort((a, b) => a.date - b.date);

            for (const reminder of validReminders) {
                const reminderTimeUTC = reminder.date;
                const reminderTimeUser = reminderTimeUTC.clone().tz(userTimezone);

                let notifyBeforeMs;
                switch (user.reminderBefore) {
                    case '5M':
                        notifyBeforeMs = 5 * 60 * 1000; // 5 –º–∏–Ω—É—Ç
                        break;
                    case '1H':
                        notifyBeforeMs = 60 * 60 * 1000; // 1 —á–∞—Å
                        break;
                    case '1D':
                        notifyBeforeMs = 24 * 60 * 60 * 1000; // 1 –¥–µ–Ω—å
                        break;
                    default:
                        notifyBeforeMs = 60 * 60 * 1000; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 1 —á–∞—Å
                }

                const notifyTimeUser = reminderTimeUser.clone().subtract(notifyBeforeMs, 'milliseconds');

                //console.log(`üìÜ Event date (User's timezone): ${reminderTimeUser.format('YYYY-MM-DD HH:mm:ss')}`);
                //console.log(`üì© Notification time (User's timezone): ${notifyTimeUser.format('YYYY-MM-DD HH:mm:ss')}`);
               // console.log("--------------");
                if (Math.abs(notifyTimeUser.diff(nowUser, 'minutes')) <= 1) {
                    await bot.telegram.sendMessage(
                        user.telegramId,
                        `‚è∞ Reminder (${user.reminderBefore} before the event): ${reminder.message}`
                    );
                    await deleteReminderById({ telegramId: user.telegramId, reminderId: reminder.id });
                    console.log(`‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.telegramId}`);
                    console.log(`üóë –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ: ${reminder.id}`);
                }
            }
        }
        // console.log(`‚úÖ Completed checking all users.`);
    } catch (error) {
        console.error("‚ùå Error processing reminders:", error);
    }
};

const deleteReminderById = async ({ telegramId, reminderId }) => {
    try {
        const user = await User.findOne({ telegramId });

        if (!user || !user.reminders) {
            return { success: false, error: '‚ùå –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.' };
        }

        const keyToDelete = [...user.reminders.entries()]
            .find(([key, reminder]) => reminder._id.toString() === reminderId)?.[0];

        if (!keyToDelete) {
            return { success: false, error: '‚ùå –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.' };
        }

        user.reminders.delete(keyToDelete);
        await user.save();

        return { success: true };
    } catch (error) {
        console.error('Error delete reminder:', error);
        return { success: false, error: '‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.' };
    }
};

const updateReminderBefore = async ({ telegramId, time }) => {
    try {
        if (!['5M', '1H', '1D'].includes(time)) {
            return { success: false, error: '‚ùå –ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.' };
        }

        const user = await User.findOneAndUpdate(
            { telegramId },
            { $set: { reminderBefore: time } },
            { new: true }
        );

        if (!user) {
            return { success: false, error: '‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.' };
        }

        return { success: true, message: `‚úÖ –í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω–æ: ${time}` };
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:', error);
        return { success: false, error: '‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.' };
    }
};

const updateTimezone = async ({ telegramId, timezone }) => {
    try {
        if (!moment.tz.zone(timezone)) {
            return { success: false, error: '‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å.' };
        }

        const user = await User.findOneAndUpdate(
            { telegramId },
            { $set: { timezone } },
            { new: true }
        );

        if (!user) {
            return { success: false, error: '‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.' };
        }

        return { success: true, message: `‚úÖ –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å –æ–±–Ω–æ–≤–ª—ë–Ω: ${timezone}` };
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞:', error);
        return { success: false, error: '‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞.' };
    }
};

module.exports = {
    registerUser,
    addReminder,
    getAllReminders,
    validateReminderDate,
    deleteReminder,
    sendScheduledMessages,
    updateReminderBefore,
    updateTimezone
};