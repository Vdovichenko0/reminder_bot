const { Scenes, Markup } = require('telegraf');

const adminSessions = new Map();
const ADMIN_COMMAND_MEDIA = process.env.ADMIN_COMMAND_MEDIA;

const mainMenuKeyboard = Markup.keyboard([
    ['‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ'],
    ['‚ùå –£–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ'],
    ['üìã –í—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è']
]).resize();

const cancelKeyboard = Markup.keyboard([
    ['New ID'],
    ['‚ùå Cancel'],
]).resize();

const adminMediaScene = new Scenes.WizardScene(
    'admin-media',
    async (ctx) => {
        const senderId = ctx.from.id.toString();

        if (senderId !== process.env.ADMIN_TG) {
            return ctx.reply('403');
        }

        const args = ctx.message.text.split(' ').slice(1);
        if (args.length < 1) {
            return ctx.reply(`‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /${ADMIN_COMMAND_MEDIA} <UserID>`);
        }

        const userId = args[0].trim();
        adminSessions.set(senderId, { userId, timestamp: Date.now(), awaitingNewId: false });

        ctx.reply(
            `üì∑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ—Å–ª–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}.\n\n‚è≥ –£ –≤–∞—Å –µ—Å—Ç—å 3 –º–∏–Ω—É—Ç—ã.`,
            cancelKeyboard
        );

        setTimeout(() => {
            if (adminSessions.has(senderId)) {
                adminSessions.delete(senderId);
                ctx.reply('‚è≥ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∑–∞–Ω–æ–≤–æ.', mainMenuKeyboard);
                ctx.scene.leave();
            }
        }, 180000);

        return ctx.wizard.next();
    },
    async (ctx) => {
        const senderId = ctx.from.id.toString();

        // –ï—Å–ª–∏ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ "‚ùå Cancel"
        if (ctx.message.text === '‚ùå Cancel') {
            ctx.reply('üöÄ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', mainMenuKeyboard);
            return ctx.scene.leave();
        }

        if (ctx.message.text === 'New ID') {
            adminSessions.set(senderId, { awaitingNewId: true });
            return ctx.reply('‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', Markup.removeKeyboard());
        }

        if (adminSessions.get(senderId)?.awaitingNewId) {
            const newUserId = ctx.message.text.trim();
            if (!/^\d+$/.test(newUserId)) {
                return ctx.reply('‚ùå –û—à–∏–±–∫–∞: ID –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
            }
            adminSessions.set(senderId, { userId: newUserId, timestamp: Date.now(), awaitingNewId: false });
            return ctx.reply(`‚úÖ –ù–æ–≤—ã–π ID —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${newUserId}\n–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ.`, cancelKeyboard);
        }

        if (!adminSessions.has(senderId)) {
            return ctx.scene.leave();
        }

        const { userId } = adminSessions.get(senderId);
        adminSessions.delete(senderId);

        try {
            if (ctx.message.photo) {
                const photoFileId = ctx.message.photo[ctx.message.photo.length - 1].file_id;
                await ctx.telegram.sendPhoto(userId, photoFileId);
                ctx.reply(`‚úÖ –§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}.`);
            } else if (ctx.message.video) {
                const videoFileId = ctx.message.video.file_id;
                await ctx.telegram.sendVideo(userId, videoFileId);
                ctx.reply(`‚úÖ –í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}.`);
            } else {
                ctx.reply('‚ùå –û—à–∏–±–∫–∞: –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ñ–æ—Ç–æ –∏ –≤–∏–¥–µ–æ.', cancelKeyboard);
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞:', error);
            ctx.reply('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.');
        }

        return ctx.scene.leave();
    }
);

module.exports = adminMediaScene;
