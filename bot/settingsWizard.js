const { Markup, Scenes } = require('telegraf');
const moment = require('moment-timezone');
const { updateReminderBefore, updateTimezone } = require('../user/service/userService');

const mainMenuKeyboard = Markup.keyboard([
    ['‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ'],
    ['‚ùå –£–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ'],
    ['üìã –í—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è']
]).resize();

const settingMenuKeyboard = Markup.keyboard([
    ['‚è≥ –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π'],
    ['üåç –ò–∑–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏–æ–Ω'],
    ['üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥']
]).resize();

const settingsWizard = new Scenes.WizardScene(
    'settings',
    async (ctx) => {
        await ctx.reply('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', settingMenuKeyboard);
        return ctx.wizard.next();
    },
    async (ctx) => {
        const text = ctx.message.text;

        if (text === '‚è≥ –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π') {
            await ctx.reply(
                '–ö–æ–≥–¥–∞ –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å?',
                Markup.inlineKeyboard([
                    [Markup.button.callback('5 –º–∏–Ω—É—Ç', 'remind_5M')],
                    [Markup.button.callback('1 —á–∞—Å', 'remind_1H')],
                    [Markup.button.callback('1 –¥–µ–Ω—å', 'remind_1D')],
                    [Markup.button.callback('üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥', 'remind_back')]
                ])
            );
        } else if (text === 'üåç –ò–∑–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏–æ–Ω') {
            await ctx.reply(
                'üìç –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é, —á—Ç–æ–±—ã —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å:',
                Markup.keyboard([
                    [Markup.button.locationRequest('üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é')],
                    ['üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥']
                ]).resize()
            );
            return ctx.wizard.selectStep(2); // –û—Å—Ç–∞—ë–º—Å—è –≤ —Å—Ü–µ–Ω–µ, –∂–¥—ë–º –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é
        } else if (text === 'üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥') {
            await ctx.reply('üöÄ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', mainMenuKeyboard);
            return ctx.scene.leave();
        } else {
            await ctx.reply('‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.', settingMenuKeyboard);
        }
    },
    async (ctx) => {
        if (ctx.message?.location) {
            const { latitude, longitude } = ctx.message.location;

            try {
                const timezone = moment.tz.guess({ lat: latitude, lon: longitude });

                if (!timezone) {
                    return await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
                }

                const result = await updateTimezone({ telegramId: ctx.from.id.toString(), timezone });

                await ctx.reply(result.message || '‚úÖ –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å –æ–±–Ω–æ–≤–ª—ë–Ω!');
                await ctx.reply('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', settingMenuKeyboard);
                return ctx.wizard.selectStep(1); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞:', error);
                await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.', settingMenuKeyboard);
            }
        } else if (ctx.message.text === 'üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥') {
            await ctx.reply('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', settingMenuKeyboard);
            return ctx.wizard.selectStep(1); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
        } else {
            await ctx.reply('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à—É –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é.', settingMenuKeyboard);
        }
    }
);

settingsWizard.action(/^remind_(.*)$/, async (ctx) => {
    const reminderTime = ctx.match[1]; // 5M, 1H, 1D
    const telegramId = ctx.from.id.toString();

    if (reminderTime === 'back') {
        await ctx.reply('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', settingMenuKeyboard);
        return ctx.wizard.selectStep(1);
    }

    const result = await updateReminderBefore({ telegramId, time: reminderTime });

    await ctx.reply(result.message || '‚úÖ –í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω–æ!');
    await ctx.reply('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', settingMenuKeyboard);
    return ctx.wizard.selectStep(1)
});

module.exports = settingsWizard;
