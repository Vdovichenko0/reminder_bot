const { Markup, Scenes } = require('telegraf');
const { registerUser } = require('../user/service/userService');
const RegisterUserDto = require('../user/dto/registerUserDto');
const moment = require('moment-timezone');

const registrationWizard = new Scenes.WizardScene(
    'registration-wizard',
    (ctx) => {
        ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:', Markup.inlineKeyboard([
            Markup.button.callback('English', 'lang_EN'),
            Markup.button.callback('–†—É—Å—Å–∫–∏–π', 'lang_RU'),
        ]));
        return ctx.wizard.next();
    },
    (ctx) => {
        if (ctx.callbackQuery && ctx.callbackQuery.data.startsWith('lang_')) {
            const lang = ctx.callbackQuery.data.split('_')[1];
            ctx.wizard.state.language = lang;
            ctx.reply('–ö–æ–≥–¥–∞ –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å?', Markup.inlineKeyboard([
                Markup.button.callback('5 –º–∏–Ω—É—Ç', 'remind_5M'),
                Markup.button.callback('1 —á–∞—Å', 'remind_1H'),
                Markup.button.callback('1 –¥–µ–Ω—å', 'remind_1D'),
            ]));
            return ctx.wizard.next();
        } else {
            ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏.');
            return;
        }
    },
    (ctx) => {
        if (ctx.callbackQuery && ctx.callbackQuery.data.startsWith('remind_')) {
            const reminder = ctx.callbackQuery.data.split('_')[1];
            ctx.wizard.state.reminderBefore = reminder;

            // –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ–≥–æ –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é
            ctx.reply(
                'üåç –í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π –≥–æ—Ä–æ–¥ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é:',
                Markup.keyboard([
                    ['üá∫üá∏ New York', 'üá¨üáß London', 'üáÆüá± Jerusalem'],
                    [Markup.button.locationRequest('üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é')]
                ]).resize().oneTime()
            );

            return ctx.wizard.next();
        } else {
            ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏.');
            return;
        }
    },
    async (ctx) => {
        let timezone = 'UTC';

        if (ctx.message && ctx.message.location) {
            const { latitude, longitude } = ctx.message.location;

            timezone = moment.tz.guess({ lat: latitude, lon: longitude });

            ctx.reply(`üåç –í–∞—à —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å: ${timezone}`);
        } else if (ctx.message && ctx.message.text) {
            const cityMapping = {
                'üá∫üá∏ New York': 'America/New_York',
                'üá¨üáß London': 'Europe/London',
                'üáÆüá± Jerusalem': 'Asia/Jerusalem'
            };

            if (cityMapping[ctx.message.text]) {
                timezone = cityMapping[ctx.message.text];
                ctx.reply(`üåç –í–∞—à —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å: ${timezone}`);
            } else {
                ctx.reply('‚ö†Ô∏è –ù–µ –º–æ–≥—É –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à –≥–æ—Ä–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞.');
                return;
            }
        } else {
            ctx.reply('‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é.');
            return;
        }

        const dto = new RegisterUserDto({
            telegramId: ctx.from.id.toString(),
            language: ctx.wizard.state.language,
            reminderBefore: ctx.wizard.state.reminderBefore,
            timezone
        });

        try {
            await registerUser(dto);
            ctx.reply(`‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!`);
        } catch (error) {
            ctx.reply(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ${error.message}`);
        }
        return ctx.scene.leave();
    }
);

module.exports = registrationWizard;
