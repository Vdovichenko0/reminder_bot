const { Markup, Scenes } = require('telegraf');
const { addReminder, validateReminderDate } = require('../user/service/userService');

const mainMenuKeyboard = Markup.keyboard([
    ['‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ'],
    ['‚ùå –£–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ'],
    ['üìã –í—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è']
]).resize();

// add reminder
const addReminderScene = new Scenes.WizardScene(
    'add-reminder',
    (ctx) => {
        ctx.session.waitingForReminder = true;
        ctx.reply(
            '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n' +
            'üìÖ *–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú - –¢–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è*\n\n' +
            '–ü—Ä–∏–º–µ—Ä:\n' +
            '‚úÖ *25.02.2025 14:30 - –ü–æ–∑–≤–æ–Ω–∏—Ç—å –≤—Ä–∞—á—É*',
            Markup.forceReply()
        );
        return ctx.wizard.next();
    },
    async (ctx) => {
        if (!ctx.session.waitingForReminder) return ctx.scene.leave();

        const input = ctx.message.text.trim();
        const reminderRegex = /^(\d{2})\.(\d{2})\.(\d{4}) (\d{2}):(\d{2}) - (.+)$/;
        const match = input.match(reminderRegex);

        if (!match) {
            return ctx.reply(
                '‚ùå *–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:*\n\n' +
                'üìå –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú - –¢–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n\n' +
                '–ü—Ä–∏–º–µ—Ä:\n' +
                '‚úÖ 25.02.2025 14:30 - –ü–æ–∑–≤–æ–Ω–∏—Ç—å –≤—Ä–∞—á—É',
                {
                    parse_mode: 'Markdown',
                    reply_markup: {
                        inline_keyboard: [[{ text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'cancel_add_reminder' }]]
                    }
                }
            );
        }

        const [, day, month, year, hour, minute, text] = match;
        const date = `${day}.${month}.${year} ${hour}:${minute}`;

        const telegramId = ctx.from.id.toString();
        const validation = await validateReminderDate({ telegramId, date });

        if (!validation.success) {
            return ctx.reply(validation.error, ctx.scene.enter('add-reminder'));
        }

        ctx.session.newReminder = { date, text: text.trim() };
        ctx.session.waitingForReminder = false;

        console.log(`üíæ saved in session: ${JSON.stringify(ctx.session.newReminder)}`);

        ctx.reply(
            `üìÖ –î–∞—Ç–∞: *${day}.${month}.${year} ${hour}:${minute}*\nüìù –¢–µ–∫—Å—Ç: *${text.trim()}*\n\n` +
            '‚úÖ *–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ:*',
            Markup.inlineKeyboard([
                Markup.button.callback('‚úÖ –î–æ–±–∞–≤–∏—Ç—å', 'confirm_add_reminder'),
                Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel_add_reminder')
            ])
        );

        return ctx.wizard.next();
    }
);


// check add
addReminderScene.action('confirm_add_reminder', async (ctx) => {
    if (!ctx.session.newReminder) {
        return ctx.reply('‚ùå –û—à–∏–±–∫–∞: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.', mainMenuKeyboard);
    }

    const { date, text } = ctx.session.newReminder;
    const telegramId = ctx.from.id.toString();

    console.log(`üì§ save: ${telegramId} - ${date} - ${text}`);

    const result = await addReminder({ telegramId, date, text });

    ctx.session.newReminder = null;

    if (result.success) {
        ctx.reply('‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ!', mainMenuKeyboard);
    } else {
        ctx.reply(result.error, mainMenuKeyboard);
    }

    return ctx.scene.leave();
});

// Cancel
addReminderScene.action('cancel_add_reminder', (ctx) => {
    ctx.session.newReminder = null;
    ctx.session.waitingForReminder = false;
    ctx.reply('‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.', mainMenuKeyboard);
    return ctx.scene.leave();
});

module.exports = addReminderScene;
