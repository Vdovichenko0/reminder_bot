// middleware/validate.js
const { validationResult } = require('express-validator');

const validate = (validations) => {
    return async (req, res, next) => {
        await Promise.all(validations.map(validation => validation.run(req)));

        const errors = validationResult(req);
        if (errors.isEmpty()) {
            return next();
        }

        res.status(400).json({ errors: errors.array() });
    };
};

module.exports = validate;


/*
Основная цель этого middleware — централизованная обработка валидации входных данных в ваших маршрутах. Рассмотрим его работу пошагово:
validationResult — это функция из библиотеки express-validator, которая собирает результаты валидации, выполненной ранее в цепочке middleware.
validate — это функция высшего порядка, которая принимает массив валидаций (validations) и возвращает асинхронную middleware функцию.

await Promise.all(validations.map(validation => validation.run(req)));
Для каждого элемента в массиве validations вызывается метод .run(req), который выполняет конкретную проверку на объекте req (запросе).
Promise.all гарантирует, что все валидации будут выполнены параллельно и завершены перед продолжением выполнения.

После выполнения всех валидаций собираются все ошибки с помощью validationResult(req).
Если ошибок нет (errors.isEmpty() возвращает true), вызывается next(), и запрос передаётся дальше по цепочке middleware или к контроллеру.

Чем Помогает Этот Middleware?
Использование этого middleware приносит несколько преимуществ:

2.1. Централизация Валидации
Упрощение Маршрутов: Вместо того чтобы добавлять обработку ошибок валидации в каждом маршруте отдельно, вы централизуете этот процесс, делая код маршрутов чище и понятнее.
2.2. Повышение Безопасности
Предотвращение Некорректных Данных: Гарантирует, что все входные данные соответствуют ожидаемым форматам и требованиям, что снижает риск ошибок и потенциальных уязвимостей.
2.3. Улучшение Читаемости и Поддерживаемости Кода
Снижение Дублирования: Повторяющиеся проверки и обработка ошибок вынесены в один middleware, что делает код более DRY (Don't Repeat Yourself).
Стандартизация Ответов: Все ошибки валидации возвращаются в одном формате, что упрощает работу с клиентской стороны.
2.4. Асинхронная Обработка
Эффективность: Использование async/await и Promise.all обеспечивает эффективное выполнение валидаций без блокировки основного потока.
 */